# Name of the GitHub Actions workflow.
name: Build Cross-Platform Executables

# Controls when the workflow will run.
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch: {}

jobs:
  # The "build" job is responsible for creating the executables.
  build:
    # This job will run on both Windows and macOS virtual machines.
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    steps:
    # Step 1: Check out your repository code so the workflow can access it.
    - name: Check out repository
      uses: actions/checkout@v4

    # Step 2: Install uv, the fast Python package installer.
    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        # Install a specific version of uv.
        version: "0.7.12"

    # Step 3: Install python
    - name: "Set up Python"
      uses: actions/setup-python@v5
      with:
        python-version-file: "pyproject.toml"

    # Step 4: Install Python packages using uv from your pyproject.toml file.
    # Also install pyinstaller separately.
    - name: Install dependencies with uv
      shell: bash
      run: |
        uv sync
        uv pip install pyinstaller

    # Step 5: Run PyInstaller to build the executable.
    # The `uv run` command executes pyinstaller inside the managed environment.
    - name: Build with PyInstaller
      shell: bash
      run: |
        if [ "${{ runner.os }}" == "Windows" ]; then
          uv run pyinstaller --noconfirm --onefile --windowed --name "WordImageTool_Windows" "main.py"
        elif [ "${{ runner.os }}" == "macOS" ]; then
          # Set the deployment target to ensure compatibility with older macOS versions.
          # This makes the app compatible with macOS 11.0 (Big Sur) and newer.
          export MACOSX_DEPLOYMENT_TARGET=11.0
          uv run pyinstaller --noconfirm --onefile --windowed --name "WordImageTool_macOS" "main.py"
        fi

    # Step 6: Upload the built executable as an artifact.
    # This allows you to download the final .exe and .app files from the GitHub Actions run page.
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ runner.os }}-Build
        path: |
          dist/WordImageTool_Windows.exe
          dist/WordImageTool_macOS.app
